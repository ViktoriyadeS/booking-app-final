// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  relationMode = "prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  name        String
  email       String    @unique
  phoneNumber String?
  pictureUrl  String?
  
  bookings    Booking[]
  reviews     Review[]
}

model Host {
  id          String     @id @default(uuid())
  username    String     @unique
  password    String
  name        String
  email       String     @unique
  phoneNumber String?
  pictureUrl  String?
  aboutMe     String?

  properties  Property[]
}

model Property {
  id            String   @id @default(uuid())
  title         String
  description   String
  location      String
  pricePerNight Float
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Int?

  host          Host     @relation(fields: [hostId], references: [id])
  hostId        String   

  bookings      Booking[]
  reviews       Review[]
  amenities     PropertyAmenity[]
}

model Amenity {
  id        String            @id @default(uuid())
  name      String            @unique

  properties PropertyAmenity[]
}

// Join table for many-to-many relation: Property and Amenity
model PropertyAmenity {
  propertyId String
  amenityId  String

  property   Property @relation(fields: [propertyId], references: [id])
  amenity    Amenity  @relation(fields: [amenityId], references: [id])

  @@id([propertyId, amenityId])
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  bookingStatus  String

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String?

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
}
